Simplifying Django
==================
Andrey Antukh <niwi@niwi.be>
0.1.0, 2014-05-16

:toc:

Why?
----

- Because django is the most used and the most powerful web framework on python.
- Because, alternatives suck (flask) or are not general purpose (tornado).
- Because we can!


This talk is not about django, is about flask.
----------------------------------------------

- Flask has worse design decisions...
- Flask says little and modular but is "fake"...
- App abstraction is well and beautiful, but anyone need
  mutiple applications in one file?
- ...


Advantages of using django.
---------------------------

- It scales much well, if size of application increases.
- It has much more comunity.
- Better python3 support.
- ...


How do we start?: Views
-----------------------

Simple! Django has views as functions or as classes:

[source, python]
----
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello World!")
----



How do we start?: Url Mappings
---------------------------

[source, python]
----
from django.conf.urls import url

urlpatterns = [
    url(r"^$", index, name="index"),
]
----

Observations:

- No url mappings as decorator like flask.
- Url mappings coupled to a function seems bad design for scale ;)



How do we start?: App
---------------------


Django enforces some settings by default.


[source, python]
----
from django.conf import settings
settings.configure(
    DEBUG=True,
    ROOT_URLCONF=sys.modules[__name__],
)
----

Observations:

- Django does not have a concept of application.
- *How many times have you run two apps or more in one file?*


How do we start?: Complete example
----------------------------------

[source, python]
----
import sys

from django.conf import settings
from django.conf.urls import url
from django.http import HttpResponse

settings.configure(
    DEBUG=True,
    ROOT_URLCONF=sys.modules[__name__],
)

def index(request):
    return HttpResponse("Hello World!")

urlpatterns = [
    url(r"^$", index, name="index"),
]

if __name__ == "__main__":
    from django.core import management as m
    m.execute_from_command_line(sys.argv)
----


How do we can improve it?: flask like route decorator
------------------------------------------------------

.Url decorator
[source, python]
----
def route(rx:str, name:str, fn=None):
    if fn is None:
        return partial(route, rx, name)

    _g = globals()
    _g.setdefault("urlpatterns", [])
    _g["urlpatterns"].append(url(rx, fn, name=name))
    return fn
----

.How we use it?
[source,python]
----
@route(r"^$", name="index")
def index(request):
    return HttpResponse("Powered by Django v2")
----


How do we can improve it?: flask like smart response (1)
---------------------------------------------------------

Now try to return a simple string instead of response objects.

.Define smart response decorator
[source, python]
----
def smart_view(fn):
    @wraps(fn)
    def _wrapper(*args, **kwargs):
        response = fn(*args, **kwargs)
        if isinstance(response, HttpResponse):
            return response
        return HttpResponse(response)

    return _wrapper
----


How do we can improve it?: flask like smart response (2)
-----------------------------------------------------

.Define new route function that uses previously defined smart_view decorator
[source, python]
----
def route(rx:str, name:str, fn=None):
    if fn is None:
        return partial(route, rx, name)

    _g = globals()
    _g.setdefault("urlpatterns", [])
    _g["urlpatterns"].append(url(rx, smart_view(fn),
                                 name=name))
    return fn
----


How do we can improve it?: flask like smart response (3)
-----------------------------------------------------

.Final views
[source, python]
----
@route(r"^$", name="index")
def index(request):
    return "Powered by Django v3"
----


How do we can improve it?: flask like smart response (4)
-----------------------------------------------------

.Complete example
[source, python]
----
import sys
from functools import partial, wraps

from django.conf.urls import url
from django.conf import settings
from django.http import HttpResponse

settings.configure(
    DEBUG=True,
    ROOT_URLCONF=sys.modules[__name__],
)

def smart_view(fn):
    @wraps(fn)
    def _wrapper(*args, **kwargs):
        response = fn(*args, **kwargs)
        if isinstance(response, HttpResponse):
            return response
        return HttpResponse(response)

    return _wrapper

def route(rx:str, name:str, fn=None):
    if fn is None:
        return partial(route, rx, name)

    _g = globals()
    _g.setdefault("urlpatterns", [])
    _g["urlpatterns"].append(url(rx, smart_view(fn),
                                 name=name))
    return fn

@route(r"^$", name="index")
def index(request):
    return "Powered by Django v3"

if __name__ == "__main__":
    from django.core import management as m
    m.execute_from_command_line(sys.argv)
----


Conclusion
----------

- My preference is to use well designed software.
- Choose the best tool for each use case.
- Flask seems very good alternative, but do not use it in apps with more that one file ;)


Questions?
----------

Me:

- Twitter: link:https://twitter.com/niwibe[*@niwibe*]
- Github: link:https://github.com/niwibe[github.com/niwibe]

